<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Parties</title>
    <!-- CSS Framework -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f6f9;
            padding: 20px;
        }
        .card a{
            text-decoration: none;
            color: #1f1f1f;
        }

        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .card h5 {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .card p {
            margin: 0;
        }

        .main-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .most-used-cards a {
            text-decoration: none;
            color: #333;
        }

        .most-used-cards .card {
            transition: all 0.3s ease-in-out;
        }

        .most-used-cards .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
        }

        .hamburger {
            cursor: pointer;
            font-size: 1.5rem;
            color: #333;
        }

        .transaction-table {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            margin-top: 10px;
            overflow-y: scroll;
        }

        .transaction-table h4 {
            margin-bottom: 20px;
            font-size: 1.2em;
            color: #495057;
        }

        .transaction-table table {
            width: 100%;
            border-collapse: collapse;
        }

        .transaction-table th,
        .transaction-table td {
            border: 1px solid #dee2e6;
            padding: 10px;
            text-align: left;
        }

        .transaction-table th {
            background-color: #f8f9fa;
            font-weight: bold;
            color: #212529;
        }

        .transaction-table td {
            color: #495057;
        }
    </style>
</head>

<body>
    <%- include('./aside')  %>

    <div id="loading-screen" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999; display: flex; align-items: center; justify-content: center;">
        <div class="spinner-border text-light" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    
    <div class="main-content">
        <div class="mb-4 d-flex justify-content-between align-items-center">
            <h1 class="fw-bold">Parties</h1>
            <i class="fas fa-bars hamburger" id="hamburger"></i>
        </div>

        <form id="filter-form" class="mb-4">
            <div class="input-group">
                <input type="text" class="form-control" id="searchInput" placeholder="Search Name..." onkeyup="filterParties()"/>
            </div>
            <button type="button" class="btn btn-success  mt-2" data-bs-toggle="modal" data-bs-target="#addPartyModalSaleMan">Add New Party</button>
            <button type="button" class="btn btn-primary mt-2" onclick="importContacts('<%= access_token %>')">Import Contacts</button>
        </form>
       

        <div class="container mt-4">
            
            <div class="row" id="partyList">
                <% parties.forEach(party => { %>
                    <div class="col-md-4 col-sm-6 mb-3 party-card">
                        <div class="card shadow-sm border-0">
                            <a href="/business-owner/partyTransactions?partyId=<%= party.id %>">
                                <div class="card-body text-center">
                                        <h5 style="font-size: 17px;" class="party-name"><%= party.PartyName %></h5>
                                        <div class="align-items-center">
                                        <div class="d-flex">
                                        <h5 style="font-size: 13px;">Receivable: </h5>
                                            <h5 class="fw-bold text-success" style="font-size: 13px;">SAR <%= party.receivable >0? party.receivable : 0%></h5>
                                        </div>
                                        <div class="d-flex">
                                            <h5 style="font-size: 13px;">Payable: </h5>
                                            <h5 class="fw-bold text-danger" style="font-size: 13px;">SAR <%= party.payable >0? party.payable : 0%></h5>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>

    </div>
</body>

<script>
    function filterParties() {
        let input = document.getElementById("searchInput").value.toLowerCase();
        let cards = document.querySelectorAll(".party-card");

        cards.forEach(card => {
            let name = card.querySelector(".party-name").textContent.toLowerCase();
            if (name.includes(input)) {
                card.style.display = "block"; // Show matching card
            } else {
                card.style.display = "none"; // Hide non-matching card
            }
        });
    }
</script>

<div class="modal fade" id="addPartyModalSaleMan" tabindex="-1" aria-labelledby="addCompanyModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addPartyModal">Add New Party</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form action="/business-owner/addParty" method="POST" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="companyName" class="form-label">Party Name</label>
                            <input type="text" class="form-control" id="companyName" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="phone" class="form-label">Phone Number</label>
                            <input type="text" class="form-control" id="companyName" name="phone" required>
                        </div>
                        <div class="mb-3">
                            <label for="address" class="form-label">Address</label>
                            <input type="text" class="form-control" id="companyName" name="address" >
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Party Email</label>
                            <input type="email" class="form-control" id="companyName" name="email">
                        </div>
                        <div class="mb-3">
                            <label for="dp" class="form-label">Profile Picture</label>
                            <input type="file" class="form-control" id="profile" name="image">
                        </div>

                        <button type="submit" class="btn btn-success">Save Party</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
  <!-- script for hamburgur -->
  <script>
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('overlay');
    const hamburger = document.getElementById('hamburger');

    hamburger.addEventListener('click', () => {
        sidebar.classList.toggle('active');
        overlay.classList.toggle('active');
    });

    overlay.addEventListener('click', () => {
        sidebar.classList.remove('active');
        overlay.classList.remove('active');
    });
</script>

<script>

    function showLoading() {
        document.getElementById("loading-screen").style.display = "flex";
    }

    function hideLoading() {
        document.getElementById("loading-screen").style.display = "none";
    }

    let accessToken  = getAccessTokenFromUrl()
    
    document.addEventListener('DOMContentLoaded',()=>{
        if(accessToken){
        showLoading()
        }else{
            hideLoading()
        }
    })
    if(accessToken){
        showLoading()
        importContacts(accessToken)
    }

    
async function importContacts(accessToken) {
    if (!accessToken) {
        authenticateWithGoogle();
    } else {
        const contacts = await fetchGoogleContacts(accessToken); // Fetch all contacts
        sendContactsToServer(contacts);
    }
}

    
    const HOSTING_CLIENT_ID = "397635889905-e3rj6bva24tgd511tp99qfbaervfmdmr.apps.googleusercontent.com";
        const CLIENT_ID = "820300599951-chq1g1l44ub8626kls0e8crkrmv8605u.apps.googleusercontent.com";
    const REDIRECT_URI = "http://localhost:3000";
    const HOSTING_REDIRECT_URI = "https://injazomanagementsystem.in"
    const SCOPE = "https://www.googleapis.com/auth/contacts.readonly";
    
    // Step 1: Redirect User to Google OAuth
    async function authenticateWithGoogle() {
    const googleAuthUrl = `https://accounts.google.com/o/oauth2/v2/auth?` +
        `client_id=${REDIRECT_URI}&` +
        `redirect_uri=${encodeURIComponent(REDIRECT_URI)}&` +
        `response_type=token&` +
        `scope=${encodeURIComponent("https://www.googleapis.com/auth/contacts.readonly")}`;

    window.location.href = googleAuthUrl;
}

    function getAccessTokenFromUrl() {
        const params = new URLSearchParams(window.location.hash.substring(1));
        return params.get("access_token");
    }
    
    // Step 3: Fetch Contacts from Google People API
    async function fetchGoogleContacts(accessToken, nextPageToken = null, allContacts = []) {
    try {
        let url = "https://people.googleapis.com/v1/people/me/connections?personFields=names,emailAddresses,phoneNumbers";
        
        if (nextPageToken) {
            url += `&pageToken=${nextPageToken}`; // Append nextPageToken for pagination
        }

        const response = await fetch(url, {
            method: "GET",
            headers: {
                Authorization: `Bearer ${accessToken}`,
            },
        });

        if (!response.ok) {
            hideLoading()
            throw new Error("Failed to fetch contacts");
        }

        const data = await response.json();
        const contacts = data.connections || [];
        
        // Extract only necessary fields
        const formattedContacts = contacts.map(contact => ({
            name: contact.names?.[0]?.displayName || "Unknown",
            email: contact.emailAddresses?.[0]?.value || "",
            tel: contact.phoneNumbers?.[0]?.value || ""
        }));

        allContacts = allContacts.concat(formattedContacts);

        // If nextPageToken exists, recursively fetch next batch of contacts
        if (data.nextPageToken) {
            return fetchGoogleContacts(accessToken, data.nextPageToken, allContacts);
        }

        console.log("All Google Contacts:", allContacts);
        return allContacts;

    } catch (error) {
        hideLoading()
        console.error("Error fetching contacts:", error);
        Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "Failed to fetch Google contacts",
        });
        return [];
    }
}

    
    // Step 4: Send Contacts to Server
    async function sendContactsToServer(contacts) {
        if (contacts.length === 0) {
            hideLoading()
            Swal.fire({
                icon: "warning",
                title: "No Contacts Found",
                text: "Your Google Contacts list is empty.",
            });
            return;
        }
    
        try {
            const response = await fetch('/admin/add-contacts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ contacts }),
            });
    
            const data = await response.json();
    
            if (response.ok) {
                Swal.fire({
                    title: `${data.data}`,
                    icon: "success",
                    draggable: false
                });
                setTimeout(() => {
                    window.location.href = '/business-owner/viewParty'
                }, 300);
            } else {
                hideLoading()
                throw new Error(data.data || "Failed to import contacts");
            }
        } catch (error) {
            hideLoading()
            Swal.fire({
                icon: "error",
                title: "Oops...",
                text: `${error.message}`,
            });
        }
    }
    
    
    </script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
</html>
