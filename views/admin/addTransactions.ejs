<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Sale</title>
    <!-- CSS Framework -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <!-- Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <style>
        .main-content header {
            margin-bottom: 20px;
        }
        
        .form-section {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .form-section h3 {
            margin-bottom: 20px;
            font-size: 24px;
        }
        
        .table input {
            width: 100%;
            border: none;
            outline: none;
            background: transparent;
        }
        
        .table input:focus {
            border-bottom: 1px solid #007bff;
        }
        
        @media (max-width: 768px) {          
                    .table-responsive {
                        overflow-x: auto; /* Allow horizontal scrolling for tables */
                    }
        
            .form-section {
                padding: 15px;
            }
        
            .table th, .table td {
                padding: 8px;
            }
        
            .form-section h3 {
                font-size: 20px;
            }
        
            .table th {
                font-size: 12px;
            }
        
            .table input {
                padding: 8px;
                font-size: 14px;
                width: 70px;
            }
        
            .row label {
                font-size: 14px;
            }
        
            .form-select {
                font-size: 14px;
            }
        
            .btn {
                font-size: 14px;
            }
        }
            </style>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f6f9;
            padding: 20px;
        }
        .main-content {
            max-width: 1200px;
            margin: 0 auto;
        }
        .serviceCharge{
            font-size: 10px;
            font-weight: 100;
        }
        .hamburger {
            cursor: pointer;
            font-size: 1.5rem;
            color: #333;
        }
        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        @media (max-width: 768px) {
            
            .table-responsive {
                overflow-x: auto; 
            }
        }

        .btn-primary,
        .btn-secondary {
            margin-right: 10px; 
        }
    </style>
</head>
<body>
   
    <%- include('./navbar.ejs') %>
    <!-- Main Content -->
    <div class="main-content">
        <!-- Header Section -->
        <header class="mb-4 d-flex justify-content-between align-items-center">
            <h1 class="fw-bold">Add Sale</h1>
            <i class="fas fa-bars hamburger" id="hamburger"></i>
        </header>

            <!-- Add Sale Form -->
            <section class="form-section mt-4">
                <form action="/admin/addTransactions" method="POST" id="saleForm">
                    <!-- Existing fields -->
                    <div class="row mb-3">
                        <input type="hidden" value="sale" name="transactionType">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="partyName" class="form-label">Party Name *</label>
                            <input type="text" id="partyName" name="partyId" class="form-control" placeholder="Enter Party Name"  list="partySuggestions" oninput="partyChange(this)" required>    
                            <input type="hidden" id="partyId" name="partyName" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="number" class="form-label">Phone Number *</label>
                            <input type="number" id="phone" name="phone" class="form-control"
                                placeholder="Enter Phone Number" required>
                        </div>
                        <button type="button" class="btn btn-primary mt-2 w-50" onclick="importContacts()">Import Contacts</button>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="Invoice Number" class="form-label">Invoice Number *</label>
                            <input type="text" id="invoiceNumber" name="invoiceNumber" class="form-control"
                                placeholder="Enter Invoice Number" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label for="Payment Type">Payment Type *</label>
                            <select name="paymentType" class="form-select" id="paymentType" onchange="paymentTypeChange(this)">
                                <option value="credit">Credit</option>
                                <option value="cash">Cash</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="date" class="form-label">Date *</label>
                            <input type="date" id="date" name="date" class="form-control" required >
                        </div>
                    </div>
                    
                    </div>

                    <!-- Products Table -->
                    <h4>Products</h4>
                    <div class="table-responsive">
                    <table class="table table-bordered" id="table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Item</th>
                                <th>Quantity (stock)</th>
                                <!-- <th>Unit<p style="font-size: 12px; color: gray;">(kg,mtr,ltr,pac)</p>
                                </th> -->
                                <th>Price/Unit<p style="font-size: 12px; color: gray;">(Price per Unit)</p>
                                </th>
                                <!-- <th>Discount (%)</th>
                                <th>Tax (%)</th> -->
                                <th>Total (SAR)</th>
                                <th>Delivered</th>
                                <th>Free</th>
                                <th>Serial Number</th>  
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="productTableBody">
                            <!-- Rows will be added dynamically here -->
                        </tbody>
                    </table>
                </div>
                    <p style="font-size: 12px; color: rgba(255, 0, 0, 0.7);">Note: Please remove the unwanted rows</p>
                    <button type="button" class="btn btn-secondary mb-3" onclick="addRow()">Add Row</button>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="TotalAmount" class="form-label">Total *</label>
                            <input type="text" id="totalAmount" name="totalAmount" class="form-control" onchange="updateBalanceDue()" required>
                        </div>
                    </div>
                    <button type="button" class="btn btn-warning mb-3" onclick="roundTotal()">Round Total</button>
                    <button type="button" class="btn btn-warning mb-3" onclick="roundDecimalsOnly()">Round Decimals</button>
                    <script>
                        function roundTotal() {
                         const totalAmount = parseFloat(document.getElementById('totalAmount').value);
                         
                         if (!isNaN(totalAmount)) {
                             const roundedTotal = Math.round(totalAmount / 5) * 5;
                             document.getElementById('totalAmount').value = roundedTotal;
                             updateBalanceDue()
                         } else {
                             alert('Please enter a valid number');
                         }
                     }
                     function roundDecimalsOnly() {
                         const totalAmount = parseFloat(document.getElementById('totalAmount').value);
                         
                         if (!isNaN(totalAmount)) {
                             const roundedDecimals = totalAmount.toFixed(2);
                             document.getElementById('totalAmount').value = roundedDecimals;
                             updateBalanceDue()
                         } else {
                             alert('Please enter a valid number');
                         }
                     }
                     </script>
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label for="recieved" id="remaining" class="form-label">Received *</label>
                            <input type="text" id="received" name="recieved" class="form-control" oninput="updateReceived()" required>
                        </div>
                        <div class="col-md-3">
                            <label for="balanceDue" class="form-label">Balance Due *</label>
                            <input type="text" id="balanceDue" name="balanceDue" class="form-control" required>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end mt-3">
                        <button type="submit" class="btn btn-primary">Save Sale</button>
                        <a href="<%= previousRoute %>" class="btn btn-secondary ms-2">Cancel</a>
                    </div>
                </form>
            </section>
        </div>
    </div>
    
</body>
<script>
    function ijsadij(element) {
        const transactionType = element.value;
        
        if (transactionType === 'sale'){
            document.getElementById('remaining').textContent = 'Received *';
        }else{
            document.getElementById('remaining').textContent = 'Paid *';
        }
    }


    document.addEventListener("DOMContentLoaded", () => {
            const prefix = "T";
            const randomNumber = Math.floor(1000 + Math.random() * 9000);
            const timestamp = Date.now().toString().slice(-4);
            const generatedCode = `${prefix}-${randomNumber}-${timestamp}`;
            document.getElementById("invoiceNumber").value = generatedCode;
    });
    
    function partyChange(element){
        const partyId = document.getElementById('partyId')
        const phoneInput = document.getElementById('phone')
        const parties = <%-JSON.stringify(parties)%>
        parties.map(party=>{
            if(party.PartyName == element.value){
                phoneInput.value = party.Phone
                partyId.value = party.id
            }
        })    
    }
</script>   
<script>
    let count = 0;

    function addRow() {
        const table = document.getElementById('productTableBody');
        const row = document.createElement('tr');
        count++;

        row.innerHTML = `
        <tr>
            <td></td>
            <td><input type="text" id="productName${count}" name="products[${count}][item]" list="productSuggestions" onchange="sugesstion(this,${count})" required></td>
            <td><div class="d-flex"><input type="number" id="quantity${count}" name="products[${count}][quantity]" oninput="updateProductTotal(this,'${count}')" required><span class="stockDisplay" id="stockDisplay${count}"></span></div></td>
            <input type="hidden"  id="unit${count}" name="products[${count}][unit]" required >
            <td><input type="text" id="priceInput${count}" name="products[${count}][pricePerUnit]" oninput="updateProductTotal(this,'${count}')" onchange="updateWholesalePrice()" required ></td>
            <input type="hidden" id="discount${count}" name="products[${count}][discount]" oninput="updateProductTotal(this,'${count}')" required >
            <input type="hidden" name="products[${count}][tax]" oninput="updateProductTotal(this,'${count}')" required>
            <td><div class= "d-flex"><input type="text" id="productTotal" name="products[${count}][productTotal]" onchange="updateSaleTotal(this)" required >
                <span id="serviceCharge${count}" class="serviceCharge"></span></div></td>
            <td><input type="text" id="deliveredQuantity" name="products[${count}][deliveredQuantity]"></td>
            <td><input type="text" id="freeQuantity" name="products[${count}][freeQuantity]"></td>
            <td><input type="text"  name="products[${count}][serial_number]" required></td>
            <input type="hidden" id="productId" name="products[${count}][productId]" >
            <td><button type="button" class="btn btn-danger btn-sm ms-2" onclick="removeRow(this)">Remove</button></td>
            </tr>
        `;

        table.appendChild(row);
        updateRowNumbers();
    }
    function makeFree(element,count){
        const row = element.closest('tr')
        row.querySelector(`[name^="products"][name$="[productTotal]"]`).value = 0;
        productTotalInput = document.getElementById('productTotal');
        productTotalInput.dispatchEvent(new Event('change'));
    }
    
    function updateSaleTotal() {
    const element = document.getElementById('table')
    const rows = element.querySelectorAll('tr'); 
    const saleTotalInput = document.getElementById('totalAmount')
    let total = 0;

    rows.forEach((row) => {
        const productTotalInput = row.querySelector(`[name^="products"][name$="[productTotal]"]`);
        if (productTotalInput) {
            total += parseFloat(productTotalInput.value) || 0; 
        }
    });
    saleTotalInput.value = total
    saleTotalInput.dispatchEvent(new Event('change'));
}

function paymentTypeChange(element){
        let balanceDue = document.getElementById('balanceDue').value
        let received = document.getElementById('received').value
        let temp = balanceDue
        document.getElementById('balanceDue').value= received
        document.getElementById('received').value  = temp
    }

    function updateBalanceDue(){

        let paymentType = document.getElementById('paymentType').value
        if(paymentType == 'credit'){
        const saleTotalInput = document.getElementById('totalAmount')
        const balanceDue = document.getElementById('balanceDue')
        const received = document.getElementById('received')
        balanceDue.value = saleTotalInput.value;
        received.value = 0
        }else{
        const saleTotalInput = document.getElementById('totalAmount')
        const balanceDue = document.getElementById('balanceDue')
        const received = document.getElementById('received')
        balanceDue.value = 0;
        received.value = saleTotalInput.value
    }
}
function updateReceived(){
    const saleTotalInput = document.getElementById('totalAmount')
    const balanceDue = document.getElementById('balanceDue')
    const received = document.getElementById('received')
    balanceDue.value = Number(saleTotalInput.value).toFixed(4)- Number(received.value).toFixed(4);
}


    function removeRow(button) {
        const row = button.closest('tr');
        row.remove();
        updateRowNumbers();
        productTotalInput = document.getElementById('productTotal');
        productTotalInput.dispatchEvent(new Event('change'));
    }

    function updateRowNumbers() {
        const rows = document.querySelectorAll('#productTableBody tr');
        rows.forEach((row, index) => {
            row.cells[0].textContent = index + 1;
        });
    }

    function updateProductTotal(input,count) {
        const row = input.closest('tr');
    
        const selectedProductName = row.querySelector(`input[id^="productName"]`).value;

        const products = <%- JSON.stringify(products) %>
        
        const selectedProduct = products.find((product) => product.item_name == selectedProductName);
        
        
        const quantity = parseFloat(row.querySelector(`[name^="products"][name$="[quantity]"]`)?.value) || 0;

         const stockDisplay = document.getElementById(`stockDisplay${count}`)
        stockDisplay.textContent = `(${selectedProduct.stock - quantity})`
// whole sale
    if(selectedProduct.wholesale_quantity_1 > 0){

        if(quantity>=selectedProduct.wholesale_quantity_1 && quantity< selectedProduct.wholesale_quantity_2){
            document.getElementsByName(`products[${count}][pricePerUnit]`)[0].value = selectedProduct.wholesale_price_1
        }else if(quantity>=selectedProduct.wholesale_quantity_2 && quantity<selectedProduct.wholesale_quantity_3){
            document.getElementsByName(`products[${count}][pricePerUnit]`)[0].value = selectedProduct.wholesale_price_2;
        }else if(quantity>=selectedProduct.wholesale_quantity_3){
            document.getElementsByName(`products[${count}][pricePerUnit]`)[0].value = selectedProduct.wholesale_price_3;
        }else if(quantity<selectedProduct.wholesale_quantity_1){
            document.getElementsByName(`products[${count}][pricePerUnit]`)[0].value = selectedProduct.sale_price;
        }

    }
        const pricePerUnit = parseFloat(row.querySelector(`[name^="products"][name$="[pricePerUnit]"]`)?.value) || 0;
        const discount = parseFloat(row.querySelector(`[name^="products"][name$="[discount]"]`)?.value) || 0;
        const tax = parseFloat(row.querySelector(`[name^="products"][name$="[tax]"]`)?.value) || 0;

        let productTotal = quantity * pricePerUnit;
        productTotal += (productTotal * tax) / 100;
        productTotal -= (productTotal * discount) / 100;

        if(selectedProduct.service_charge_quantity_1 > 0){
        if(quantity >= 1 && quantity < selectedProduct.service_charge_quantity_1){
            row.querySelector(`[name^="products"][name$="[productTotal]"]`).value = Number(productTotal.toFixed(2)) + Number(selectedProduct.service_charge_1)
           document.getElementById(`serviceCharge${count}`).textContent = 'Service Charge :'+selectedProduct.service_charge_1
        }else if(quantity >= selectedProduct.service_charge_quantity_1 && quantity < selectedProduct.service_charge_quantity_2){
            row.querySelector(`[name^="products"][name$="[productTotal]"]`).value = Number(productTotal.toFixed(2)) + Number(selectedProduct.service_charge_2)
            document.getElementById(`serviceCharge${count}`).textContent = 'Service Charge :'+selectedProduct.service_charge_2
        }else if(quantity >= selectedProduct.service_charge_quantity_2 && quantity < selectedProduct.service_charge_quantity_3){
            row.querySelector(`[name^="products"][name$="[productTotal]"]`).value = Number(productTotal.toFixed(2)) + Number(selectedProduct.service_charge_3)
            document.getElementById(`serviceCharge${count}`).textContent ='Service Charge :'+ selectedProduct.service_charge_3
        }else{
            row.querySelector(`[name^="products"][name$="[productTotal]"]`).value = productTotal.toFixed(2);    
            document.getElementById(`serviceCharge${count}`).textContent = 0
        }
    }

        productTotalInput = document.getElementById('productTotal');
        productTotalInput.dispatchEvent(new Event('change'));
    }

    function validateForm(event) {
        const rows = document.querySelectorAll('#productTableBody tr');
        const hasProduct = Array.from(rows).some(row => {
            return row.querySelector(`[name^="products"][name$="[item]"]`).value.trim() !== '';
        });

        if (!hasProduct) {
            alert('Please enter at least one product.');
            event.preventDefault();
        }
    }

    // Initialize 3 rows by default
    window.onload = function () {
        for (let i = 0; i < 3; i++) {
            addRow();
        }
    };
</script>
</head>
<datalist id="productSuggestions">
<%if(products.length){ products.forEach(product=> {%>
    <option value="<%= product.item_name %>" >
        <% })}else{ %>
            <option value="No Products Found">
                <% } %>
</datalist>
<datalist id="partySuggestions">
    <% if (parties.length) { %>
        <% parties.forEach(party => { %>
            <option value="<%= party.PartyName %>"></option>
        <% }) %>
    <% } else { %>
        <option disabled value="No Party Found">No Party Found</option>
    <% } %>
    </datalist>
<script>
function sugesstion(element,count) {
    
        const selectedProductName = element.value;
        const products = <%- JSON.stringify(products) %>
        
        const selectedProduct = products.find(
            (product) => product.item_name === selectedProductName
        );
        
        
        if (selectedProduct) {
            // const row = element.target.closest('tr');
            document.getElementsByName(`products[${count}][unit]`)[0].value = selectedProduct.unit;
            document.getElementsByName(`products[${count}][pricePerUnit]`)[0].value = selectedProduct.sale_price;
            document.getElementsByName(`products[${count}][discount]`)[0].value = selectedProduct.discount_value;
            document.getElementsByName(`products[${count}][tax]`)[0].value = selectedProduct.tax_rate;
            document.getElementsByName(`products[${count}][productId]`)[0].value = selectedProduct.id;
        }else{
            document.getElementsByName(`products[${count}][unit]`)[0].value = ''
            document.getElementsByName(`products[${count}][pricePerUnit]`)[0].value = ''
            document.getElementsByName(`products[${count}][discount]`)[0].value = ''
            document.getElementsByName(`products[${count}][tax]`)[0].value = ''
        }
}

function toggleSidebar() {
        const sidebar = document.getElementById('sidebar');
        sidebar.style.display = sidebar.style.display === 'block' ? 'none' : 'block';
    }

    function setDefaultDate() {
const dateInput = document.getElementById('date');
const today = new Date();
const formattedDate = today.toISOString().split('T')[0]; 
dateInput.value = formattedDate;
}


window.onload = setDefaultDate;

</script>
<script>
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('overlay');
    const hamburger = document.getElementById('hamburger');

    hamburger.addEventListener('click', () => {
        sidebar.classList.toggle('active');
        overlay.classList.toggle('active');
    });

    overlay.addEventListener('click', () => {
        sidebar.classList.remove('active');
        overlay.classList.remove('active');
    });
</script>

<script>
    function downloadPdf() {
 
     const partyName = document.getElementById('partyName').value
     const phone = document.getElementById('phone').value
     const invoiceNumber = document.getElementById('invoiceNumber').value
     const date = document.getElementById('date').value
     const paymentType = document.getElementById('paymentType').value
     const totalAmount = document.getElementById('totalAmount').value
     const balanceDue = document.getElementById('balanceDue').value
     const received = document.getElementById('received').value
 
     // Create the wrapper div for the invoice
     const wrapper = document.createElement('div');
     wrapper.style.padding = '20px';
     wrapper.style.border = '1px solid black';
     wrapper.style.width = '80%';
     wrapper.style.margin = 'auto';
     wrapper.style.fontFamily = 'Arial, sans-serif';
     wrapper.style.marginTop = '50px';
 
     // Company Name
     const companyName = document.createElement('h2');
     companyName.textContent = 'Injaz';
     companyName.style.textAlign = 'center';
     companyName.style.marginBottom = '5px';
     wrapper.appendChild(companyName);
 
     // Report Heading
     const reportHeading = document.createElement('h4');
     reportHeading.textContent = 'Sale Invoice';
     reportHeading.style.textAlign = 'center';
     wrapper.appendChild(reportHeading);
 
     // Party Details Section
     const partyDetails = document.createElement('div');
     partyDetails.style.marginBottom = '15px';
     partyDetails.innerHTML = `
         <p><strong>Party Name:</strong> <span id="invoicePartyName">${partyName}</span></p>
         <p><strong>Party Phone:</strong> <span id="partyPhone">${phone}</span></p>
         <p><strong>Invoice Date:</strong> <span id="invoiceDate">${date}</span></p>
         <p><strong>Invoice Number:</strong> <span id="invoiceNumber">${invoiceNumber}</span></p>
         <p><strong>Payment Type:</strong> <span id="paymentType">${paymentType}</span></p>
     `;
     wrapper.appendChild(partyDetails);
 
     // Table Section (Clone the existing table but remove buttons)
     const tableContent = document.getElementById('table').cloneNode(true);
     
     // Remove buttons inside the cloned table
     const buttons = tableContent.querySelectorAll('button');
     buttons.forEach(button => button.remove());
     const ths = tableContent.querySelectorAll('th');
     ths.forEach(th => {
         th.style.width = '70px'
         th.style.padding = '2px';
         th.style.textAlign = 'center';
         th.style.border = '1px solid #000';
     })
     const tds = tableContent.querySelectorAll('td');
     tds.forEach(td => {
         td.style.width = '70px'
         td.style.padding = '2px';
         td.style.textAlign = 'center';
         td.style.border = '1px solid #000';
     });
 
 
     const products = tableContent.querySelectorAll('input');
 
 
     const productsArray = [];
     products.forEach(input=>{
         const match = input.name.match(/products\[(\d+)\]\[(\w+)\]/);
     if (match) {
         const index = match[1]; // Extract product index (e.g., "1", "2")
         const key = match[2]; // Extract field name (e.g., "item", "quantity")
 
         // Ensure an object exists for this index
         if (!productsArray[index]) {
             productsArray[index] = {};
         }
 
         // Assign the input value to the correct key
         productsArray[index][key] = input.value;
     }
     })
     const newProducts = productsArray.filter(product => product);
     const filteredProducts = newProducts.map(({ item, quantity, pricePerUnit, productTotal }) => ({
                                     item,
                                     quantity,
                                     pricePerUnit,
                                     productTotal
                                     }));
    
     const productTable = document.createElement('table');
     productTable.style.width = '100%';
     productTable.style.borderCollapse = 'collapse';
     productTable.style.marginTop = '20px';
     const headerRow = document.createElement('tr');
     const headers = ["Item", "Quantity", "Price", "Total"];
     headers.forEach(headerText => {
     const th = document.createElement('th');
     th.textContent = headerText;
     th.style.border = '1px solid black';
     th.style.padding = '8px';
     th.style.textAlign = 'left';
     th.style.backgroundColor = '#f2f2f2'; // Light gray background for header
     headerRow.appendChild(th);
     });
     // Append the header row to the table
     productTable.appendChild(headerRow);
 
     filteredProducts.forEach(product => {
     const row = document.createElement('tr');
 
     Object.values(product).forEach(text => {
         const td = document.createElement('td');
         td.textContent = text;
         td.style.border = '1px solid black';
         td.style.padding = '8px';
         td.style.textAlign = 'left';
     row.appendChild(td);
     });
 
     productTable.appendChild(row);
     });
 
 
 
     wrapper.appendChild(productTable);
 
     // Total Amount & Signature Section
     const summarySection = document.createElement('div');
     summarySection.style.marginTop = '20px';
     summarySection.innerHTML = `
         <p><strong>Total Amount:</strong> <span id="totalAmount">SAR ${totalAmount} </span></p>
         <p><strong>Received:</strong> <span id="amountReceived">SAR ${received}</span></p>
         <p><strong>Balance Due:</strong> <span id="balanceDue">SAR ${balanceDue}</span></p>
         
     `;
     wrapper.appendChild(summarySection);
 
     html2pdf().set({ filename: 'Sale_Invoice.pdf' }).from(wrapper).save();
 
     // <div style="margin-top: 30px; text-align: right;">  //signature
     //         <p><strong>Authorized Signature</strong></p>
     //         <hr style="width: 150px; margin-right: 0;">
     //     </div>
 }
 
 </script>
 <script>
    let allowSubmit = false; 

    document.getElementById("saleForm").addEventListener("submit", function(event) {
        if (!allowSubmit) {
            event.preventDefault(); 
            Swal.fire({
                title: "Do you want to Download Invoice?",
                showDenyButton: true,
                confirmButtonText: "Yes",
                denyButtonText: `No`
            }).then(async (result) => {
                if (result.isConfirmed) {
                    await downloadPdf();
                    setTimeout(() => {
                        allowSubmit = true;
                        event.target.submit();
                    }, 2000);
                } else if (result.isDenied) {
                    allowSubmit = true;
                    event.target.submit();
                }
            });
        }
    });
</script>
 <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
 <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

 <script>
    async function importContacts() {
       if ('contacts' in navigator && 'ContactsManager' in window) {
           try {
               const props = ['name', 'tel', 'email', 'address'];
               const contacts = await navigator.contacts.select(props, { multiple: true });
               console.log(contacts);
   
               // Prepare the contacts to be sent to the server
   
               // Send contacts to the server
               const response = await fetch('/admin/add-contacts', {
                   method: 'POST',
                   headers: {
                       'Content-Type': 'application/json',
                   },
                   body: JSON.stringify({ contacts }),
               })
               .then(response => {
               if (response.ok) {
                   return response.json();
               } else if (response.status === 409) {
                   return response.json().then(data => {
                       throw new Error(data.data);
                   });
               } else {
                   throw new Error('Failed to import contacts');
               }
           })
           .then(data => {
               Swal.fire({
               title: `${data.data}`,
               icon: "success",
               draggable: false
               });
               setTimeout(()=>{
                   window.location.reload()
               },300)
           })
           .catch(error => {
               Swal.fire({
                   icon: "error",
                   title: "Oops...",
                   text: `${error.message}`
                   });
           });
           } catch (error) {
               console.error('Error accessing contacts:', error);
           }
       } else {
           Swal.fire({
                   icon: "error",
                   title: "Oops...",
                   text: "Contact Picker is not supported on this device.",
                   footer:'Try again from mobile devices'
                   });
       }
   }
   
      </script>

<script>
    async function importContacts() {
       if ('contacts' in navigator && 'ContactsManager' in window) {
           try {
               const props = ['name', 'tel', 'email', 'address'];
               const contacts = await navigator.contacts.select(props, { multiple: true });
               console.log(contacts);
   
               // Prepare the contacts to be sent to the server
   
               // Send contacts to the server
               const response = await fetch('/admin/add-contacts', {
                   method: 'POST',
                   headers: {
                       'Content-Type': 'application/json',
                   },
                   body: JSON.stringify({ contacts }),
               })
               .then(response => {
               if (response.ok) {
                   return response.json();
               } else if (response.status === 409) {
                   return response.json().then(data => {
                       throw new Error(data.data);
                   });
               } else {
                   throw new Error('Failed to import contacts');
               }
           })
           .then(data => {
               Swal.fire({
               title: `${data.data}`,
               icon: "success",
               draggable: false
               });
               setTimeout(()=>{
                   window.location.reload()
               },300)
           })
           .catch(error => {
               Swal.fire({
                   icon: "error",
                   title: "Oops...",
                   text: `${error.message}`
                   });
           });
           } catch (error) {
               console.error('Error accessing contacts:', error);
           }
       } else {
           Swal.fire({
                   icon: "error",
                   title: "Oops...",
                   text: "Contact Picker is not supported on this device.",
                   footer:'Try again from mobile devices'
                   });
       }
   }
   
      </script>

</html>